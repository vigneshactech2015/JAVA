PSQL COMMANDS :

1) CREATE DATABASE nameofdatabase;

2) CREATE TABLE nameoftable;

3) DROP DATABASE nameofdatabase(int id PRIMARY KEY NOT NULL);

4) DROP TABLE nameoftable;

5) \l (To list the database or table)

6) \d (To check the details inside table / database)

7) \dt (To check only tables)

8) INSERT INTO nameoftable (first_name,last_name,gender,date_of_birth) VALUES('Anne','Smith','FEMALE',date '1988-01-09');

9) SELECT * FROM nameoftable;

10) \q (To quit)

11) SELECT column_name FROM nameoftable WHERE condition;

12) SELECT * FROM nameoftable ORDER BY column_name ASC;

13)  SELECT * FROM nameoftable ORDER BY column_name DESC;

14) SELECT DISTINCT column_name FROM nameoftable ORDER BY column_name ; (To remove duplicate values)

15) SELECT COUNT (DISTINCT column_name) AS newVariableName FROM nameoftable;

16) SELECT * FROM nameoftable ORDER BY column_name ASC LIMIT 1;

17) SELECT * FROM person WHERE country_of_birth='France' AND gender='Female';

18) SELECT COUNT(*) FROM person WHERE country_of_birth='France' AND gender='Female';

19) SELECT * FROM person WHERE country_of_birth IN ('France','Brazil','China');

20) SELECT * FROM person WHERE date_of_birth BETWEEN DATE '2024-01-01' AND '2025-01-01' ;

21) SELECT * FROM person WHERE email LIKE '%.com' ;

22) SELECT column_name, COUNT(*) FROM tablename GROUP BY column_name;

23) SELECT column_name, COUNT(*) FROM tablename GROUP BY column_name HAVING COUNT(*)>50 ;

24) SELECT MAX(column_name) FROM tablename;

25) SELECT make , MAX(price) FROM car GROUP BY make;

26) SELECT make , SUM(price) FROM car GROUP BY make;

27) SELECT make,SUM(price) FROM car GROUP BY make ORDER BY sum DESC limit 1;

28) SELECT id,make,model,price,ROUND(price*0.10,2) AS discountPrice FROM car;

29) SELECT NOW()::DATE;

30) SELECT (NOW() - INTERVAL '1 YEAR')::DATE;

31) ALTER TABLE table_name DROP CONSTRAINT constraint_name;

32) ALTER TABLE table_name ADD PRIMARY KEY(column_name);

33) DELETE FROM table_name WHERE condition;

34) ALTER TABLE table_name ADD CONSTRAINT any_userdefinedname_of_constraint UNIQUE (column_name);

35) ALTER TABLE person ADD CONSTRAINT gender_constraint CHECK(gender='Female' OR gender='Male');

36) UPDATE table_name SET column_name = column_value WHERE condition;

37) JOINS :

------------sql file ------------------

create table car (
	id BIGSERIAL NOT NULL PRIMARY KEY,
	make VARCHAR(100) NOT NULL,
	model VARCHAR(100) NOT NULL,
	price NUMERIC(19, 2) NOT NULL
);

create table person (
    id BIGSERIAL NOT NULL PRIMARY KEY,
	first_name VARCHAR(50) NOT NULL,
	last_name VARCHAR(50) NOT NULL,
	gender VARCHAR(7) NOT NULL,
	email VARCHAR(100),
	date_of_birth DATE NOT NULL,
	country_of_birth VARCHAR(50) NOT NULL,
	car_id BIGINT REFERENCES car (id),
	UNIQUE(car_id)
);



insert into person (first_name, last_name, gender, email, date_of_birth, country_of_birth) values ('Fernanda', 'Beardon', 'Female', 'fernandab@is.gd', '1953-10-28', 'Comoros');
insert into person (first_name, last_name, gender, email, date_of_birth, country_of_birth) values ('Omar', 'Colmore', 'Male', null, '1921-04-03', 'Finland');
insert into person (first_name, last_name, gender, email, date_of_birth, country_of_birth) values ('John', 'Matuschek', 'Male', 'john@feedburner.com', '1965-02-28', 'England');

insert into car (make, model, price) values ('Land Rover', 'Sterling', '87665.38');
insert into car (make, model, price) values ('GMC', 'Acadia', '17662.69');

-------------sql file ----------------------------

UPDATING Foreign key reference in person table :

UPDATE person SET car_id=2 WHERE id=1;
UPDATE person SET car_id=1 WHERE id=2;



INNER JOIN : UNION TYPE (common in both the table) 


SELECT * FROM person JOIN car ON person.car_id=car.id;


LEFT JOIN : All in Left table + common in Right+Left table 

SELECT * FROM person LEFT JOIN car ON person.car_id=car.id;







